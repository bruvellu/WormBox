/* WormBox */

macro "Unused Tool - " {}

macro "Load ROI for image Action Tool - C262 T0808l T2808o T8808a Tc808d P2c3e4d5c6f7d8e9caebdcfddecff0" {
    loadWorm();
}
macro "Load ROI for image [1]" {
    loadWorm();
}

macro "Save image data Action Tool - C622 T0808s T5808a Ta808v Tc808e P2c3e4d5c6f7d8e9caebdcfddecff0" {
    saveWorm(true);
}
macro "Save image data [2]" {
    saveWorm(true);
}

macro "Count structure Action Tool - C222 T0807c T4807o T7807u Tb807n Tf807t P2c3e4d5c6f7d8e9caebdcfddecff0" {
    loadWorm();
    count();
    saveWorm(false);
}
macro "Count structure data [3]" {
    loadWorm();
    count();
    saveWorm(false);
}

//TODO Write return values for all functions.

function getFilename(title) {
    /*
     * Parse window title to get filename without extension.
     *
     * Exit if filename has extra dots in it.
     */
    temp = split(title, ".");
    listSize = temp.length;
    if ( listSize > 2 ) {
        exit("Filename should not have \".\" characters (except preceding the extension):\n \n" + title + "\n \nPlease rename the file and try to load WormBox again.");
    }
    name = temp[0];
    return name;
}

function getExtension(title) {
    /*
     * Parse window title to get the filename extension.
     */
    temp = split(title, ".");
    extension = temp[temp.length-1];
    if (extension != "tif" || extension != "TIF") {
        showMessage("Warning", title + " is not a TIFF file. After measurements, it \nwill be saved as .tif to keep scale settings.");
    }
    return extension;
}

function isScaled(title) {
    /*
     * Check if a scale has been set on the current image.
     *
     * If not, ask user to interact.
     */
    selectImage(title);
    getPixelSize(unit, pixelWidth, pixelHeight, pixelDepth);
    //TODO Check if unit is set and force user to update.
    if (pixelWidth == 1 || pixelWidth == 1 || unit == "pixels" || unit == "" || unit == " ") {
        setTool("line");
        waitForUser("Critical issue!", "It looks like " + title + " scale \nis not set or the unit name is missing:\n \nPixel width: " + pixelWidth + "\nPixel height: " + pixelHeight + "\nPixel depth: " + pixelDepth + "\nUnit: " + unit + "\n \nWith this window open, set the scale using \nAnalyse > Set Scale... and then hit OK to continue.");
        getPixelSize(unit, pixelWidth, pixelHeight, pixelDepth);
        if (pixelWidth == 1 || pixelWidth == 1 || unit == "pixels" || unit == "" || unit == " ") {
            exit("Scale was not set. Impossible to continue... \nSet the scale before running WormBox again. Bye!");
        }
    }
}

function count() {
    /*
     * Workflow to count structures in the images.
     */
    run("Select None");
    setTool("multipoint");
    waitForUser("Without closing this window:\n \n1. Count the number of structures by clicking on the image.\n \n2. When finished, press OK and give a name for this structure.");
    setKeyDown("alt");
    roiManager("Add");
}

function getHeightUnit() {
    /*
     * Fill default landmarks within the image dimensions.
     */
    height = getHeight();
    hUnit = height / n;
    return hUnit - hUnit/2;
}

function loadWorm() {
    /*
     * Should be run after image is opened.
     *
     * Check if the image was scaled, ask user if not.
     *
     * Try to load the landmarks: image ROI, default ROI, or get input from 
     * user to build a default ROI; in this order.
     *
     * Let user modify landmarks.
     */

    // Necessary to load ROI Manager with Edit Mode activated.
    requires("1.45m");

    // Read window title to get the image name.
    title = getTitle();

    // Check if image is properly scaled.
    isScaled(title);

    // Get extension from filename.
    extension = getExtension(title);

    // Get filename without extension.
    name = getFilename(title);

    // Get image folder.
    dir = getDirectory("image");

    // Define full image path without extension.
    namePath = dir + name;

    // Define ROI file for image.
    roiset = name + ".zip";

    // Define path to ROI file.
    roisetPath = dir + roiset;

    // Define default ROI template filename.
    roiTemplate = "RoiSet.zip";

    // Define default ROI template path.
    roiTemplatePath = dir + roiTemplate;

    // Clear selection before anything.
    run("Select None");

    // Load ROI Manager with "show all" and "name as labels".
    run("ROI Manager...");
    roiManager("UseNames", "true");
    roiManager("Show All");
    roiManager("Show All with labels");

    // Try to open image roi, then default template, else provide a new 
    // template.
    if (File.exists(roisetPath)) {
        // Load image ROI file "filename.zip"
        roiManager("Open", roisetPath);
    } else {
        if (File.exists(roiTemplatePath)) {
            // Load default template "RoiSet.zip"
            roiManager("Open", roiTemplatePath);
        } else {
            // Call default template builder.
            Dialog.create("Create a template");
            Dialog.addNumber("Number of landmarks", 10);
            Dialog.show();
            // Get number of landmarks from the user.
            n = Dialog.getNumber();
            // Get image dimensions to calculate unit.
            width = getWidth();
            wUnit = width / n;
            hUnit = getHeightUnit();
            //XXX Small image dimensions might overflow landmarks.
            for (i=0; i<n; i++) {
                makePoint(wUnit, hUnit*(i+1));
                roiManager("Add");
                roiManager("Select", i);
                roiManager("Rename", i+1);
            }
            roiManager("Deselect");
            roiManager("Save", roiTemplatePath);
        }
    }
}

function saveWorm(meristic) {
    /*
     * Save landmarks to ROI and to a text file for posterior analysis.
     *
     * Argument "meristic" can be "true" to prompt user to count structures or 
     * "false" to skip this prompt.
     */

    // Set decimal to 3.
    run("Set Measurements...", "display redirect=None decimal=3");

    // Set defaults for data output with numbered rows (copy_row).
    run("Input/Output...", "jpeg=75 gif=-1 file=.txt use copy_row");

    // Read window title to get the image name.
    title = getTitle();

    // Parsing title to purge extension.
    name = getFilename(title);

    // Get image folder.
    dir = getDirectory("image");

    // Define full image path without extension.
    namePath = dir + name;

    //XXX Make WormBox_Analyzer.py read ROI ZIP directly, instead of TXT.
    filePath = namePath + "_data.txt";

    // If it is a regular saving, ask user to count (meristic=true).
    if (meristic == true) {
        counting = getBoolean("Do you want to count structures?");
        if (counting == true) {
            count();
        }
    }

    // Deselect items on the list.
    roiManager("Deselect");

    // Save ROI for the image.
    roiManager("Save", namePath + ".zip");

    // Calculate measurements.
    roiManager("Measure");

    // Focus Results window
    selectWindow("Results");

    // Finally save measurements.
    saveAs("measurements", filePath);

    // Disable ROI Manager points.
    roiManager("Show None");

    // Close windows.
    selectWindow("Results");
    run("Close");
    selectWindow("ROI Manager");
    run("Close");

    // Select opened window to save.
    selectWindow(title);
    // Save image as TIFF (makes TIF >> tif).
    //XXX Ideally it should preserve the extension.
    saveAs("tiff", namePath);
}
